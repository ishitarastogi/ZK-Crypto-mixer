// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class userAdded extends ethereum.Event {
  get params(): userAdded__Params {
    return new userAdded__Params(this);
  }
}

export class userAdded__Params {
  _event: userAdded;

  constructor(event: userAdded) {
    this._event = event;
  }

  get root(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get hashPairings(): Array<BigInt> {
    return this._event.parameters[1].value.toBigIntArray();
  }

  get pairDirection(): Array<i32> {
    return this._event.parameters[2].value.toI32Array();
  }
}

export class CryptoMixer extends ethereum.SmartContract {
  static bind(address: Address): CryptoMixer {
    return new CryptoMixer("CryptoMixer", address);
  }

  admin(): Address {
    let result = super.call("admin", "admin():(address)", []);

    return result[0].toAddress();
  }

  try_admin(): ethereum.CallResult<Address> {
    let result = super.tryCall("admin", "admin():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  doesRootExist(_root: BigInt): boolean {
    let result = super.call("doesRootExist", "doesRootExist(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(_root)
    ]);

    return result[0].toBoolean();
  }

  try_doesRootExist(_root: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "doesRootExist",
      "doesRootExist(uint256):(bool)",
      [ethereum.Value.fromUnsignedBigInt(_root)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  nextLeafIdx(): BigInt {
    let result = super.call("nextLeafIdx", "nextLeafIdx():(uint256)", []);

    return result[0].toBigInt();
  }

  try_nextLeafIdx(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nextLeafIdx", "nextLeafIdx():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  roots(param0: BigInt): boolean {
    let result = super.call("roots", "roots(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);

    return result[0].toBoolean();
  }

  try_roots(param0: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("roots", "roots(uint256):(bool)", [
      ethereum.Value.fromUnsignedBigInt(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  treeLevel(): i32 {
    let result = super.call("treeLevel", "treeLevel():(uint8)", []);

    return result[0].toI32();
  }

  try_treeLevel(): ethereum.CallResult<i32> {
    let result = super.tryCall("treeLevel", "treeLevel():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _hasher(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AddUserCall extends ethereum.Call {
  get inputs(): AddUserCall__Inputs {
    return new AddUserCall__Inputs(this);
  }

  get outputs(): AddUserCall__Outputs {
    return new AddUserCall__Outputs(this);
  }
}

export class AddUserCall__Inputs {
  _call: AddUserCall;

  constructor(call: AddUserCall) {
    this._call = call;
  }

  get _Commitment(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class AddUserCall__Outputs {
  _call: AddUserCall;

  constructor(call: AddUserCall) {
    this._call = call;
  }
}
